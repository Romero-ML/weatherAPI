{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies and Setup\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import requests\n",
    "from pprint import pprint\n",
    "import time\n",
    "\n",
    "# Import API key\n",
    "from config import api_keys\n",
    "\n",
    "# Incorporated citipy to determine city based on latitude and longitude\n",
    "from citipy import citipy\n",
    "\n",
    "# Output File (CSV)\n",
    "output_data_file = \"output_data/cities.csv\"\n",
    "\n",
    "# Range of latitudes and longitudes\n",
    "lat_range = (-90, 90)\n",
    "lng_range = (-180, 180)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# List for holding lat_lngs and cities\n",
    "lat_lngs = []\n",
    "cities = []\n",
    "\n",
    "# Create a set of random lat and lng combinations\n",
    "lats = np.random.uniform(low=-90.000, high=90.000, size=1500)\n",
    "lngs = np.random.uniform(low=-180.000, high=180.000, size=1500)\n",
    "lat_lngs = zip(lats, lngs)\n",
    "\n",
    "# Identify nearest city for each lat, lng combination\n",
    "for lat_lng in lat_lngs:\n",
    "    city = citipy.nearest_city(lat_lng[0], lat_lng[1]).city_name\n",
    "    \n",
    "    # If the city is unique, then add it to a our cities list\n",
    "    if city not in cities:\n",
    "        cities.append(city)\n",
    "\n",
    "# Print the city count to confirm sufficient count\n",
    "cities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#seting the list for the data API\n",
    "x = 1\n",
    "claudiness =[]\n",
    "humidity = []\n",
    "lat = []\n",
    "temp = []\n",
    "wind = []\n",
    "\n",
    "#seting up the loop for the list \n",
    "print(\"hi\")\n",
    "for item in cities:\n",
    "    try: \n",
    "        base_url_weather = \"http://api.openweathermap.org/data/2.5/weather?q={0}&appid={1}\".format(item,api_keys)\n",
    "        response = requests.get(base_url_weather).json()\n",
    "        print(\"city number\" + str(x))\n",
    "        time.sleep(.75)\n",
    "\n",
    "        clouds = response['clouds'][\"all\"]\n",
    "        claudiness.append(clouds)\n",
    "        humidit = response['main']['humidity']\n",
    "        humidity.append(humidit)\n",
    "        latt = response['coord']['lat']\n",
    "        lat.append(latt)\n",
    "        tempp = response['main']['temp']\n",
    "        temp.append(tempp)\n",
    "        windd = response['wind']['speed']\n",
    "        wind.append(windd)\n",
    "\n",
    "        x = x+1\n",
    "    except Exception:\n",
    "        print(\"Failed\")\n",
    "        time.sleep(.75)\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather = pd.DataFrame({\"claudiness\":claudiness,\n",
    "                        \"humidit\":humidity,\n",
    "                        \"latt\":lat,\n",
    "                        \"tempp\":temp,\n",
    "                        \"windd\":wind}\n",
    "                      )\n",
    "weather.to_csv(\"weather2.csv\")\n",
    "print(weather)                       \n",
    "                    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather.plot.scatter(x=\"latt\",\n",
    "                     y= \"tempp\",\n",
    "                     c = \"blue\")\n",
    "plt.title(\"Temp vs Lat\")\n",
    "plt.savefig(\"Temp_vs_Lat.png\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather.plot.scatter(x=\"latt\",\n",
    "                     y= \"humidit\",\n",
    "                     c = \"blue\")\n",
    "plt.title(\"Humidit vs Lat\")\n",
    "plt.savefig(\"Humidit_vs_Lat.png\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather.plot.scatter(x=\"latt\",\n",
    "                     y= \"claudiness\",\n",
    "                     c = \"blue\")\n",
    "plt.title(\"claudiness vs Lat\")\n",
    "plt.savefig(\"claudiness_vs_Lat.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "weather.plot.scatter(x=\"latt\",\n",
    "                     y= \"windd\",\n",
    "                     c = \"blue\")\n",
    "plt.title(\"windd vs Lat\")\n",
    "plt.savefig(\"windd_vs_Lat.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
